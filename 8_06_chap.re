= Raspberry PiとGCPを使って、SMSのE2E監視を実装してみた!

//flushright{
瀧川 大樹
//}

== はじめに

こんにちは！ 私は普段、某通信事業者のショートメッセージングサービス(以下 SMSと記載)を提供するシステムの保守業務をしています。本章ではRaspberry Piを使ってSMSの送受信テストを自動化し、GCPのGAEとCloud SQLでWebAPIを構築して、社内の監視システムに連携させた事例について紹介します。

== E2E監視の重要性と構築した経緯

なじみがない方のために、SMSについて少し紹介させて頂きます。SMSは電話番号を送信先情報に指定し、テキストメッセージをやり取りするメッセージングサービスです。ユーザコミュニケーションの用途としての利用は減っていますが、Webサービスの2段階認証の際のワンタイムパスワードをユーザへ送付するような、システムからユーザに送られるケースについての利用は増えています。社内ではSMS関連のシステムは重要インフラとして定義され、障害が発生した場合については、迅速な状況確認と復旧が要求されます。私たち運用担当は障害対応の際、まず、お客様が実際にサービスを使えているかどうかを最初に確認します。ここで、お客様が実際にサービスを使えているのか確認するために、End to End の監視(以後、E2E監視と記載)は非常に重要です。

E2E監視とは、システム外部からユーザと同様の方法でアクセスして、そのシステムが正常に稼働しているか確認するための監視です。障害が発生した際に手作業で端末を使って試験をしていると障害検知・復旧が遅くなり、お客様と約束している品質を守る事が難しくなります。そのため、私たちの部署では、システムの導入の際には、E2E監視の実装をする事を必須の条件としています。E2E監視の実装の内容としては、サンプルとしてお客様のリクエストをエンドポイントに実行し、その応答結果や応答時間を監視しています。

以前まで、SMSのE2E監視は、SMSのE2E監視専用のサーバを構築して実現していました。SMSが利用するプロトコルは非常にニッチな事もあり、SMSのE2E監視専用のサーバはベンダーが構築したものを利用していました。最近、このSMSのE2E監視サーバのサポート期間が終了することになり、構築をしたベンダーからリプレイスの提案を頂きました。その提案頂いた費用が非常に高額であったため、自社内製でSMSのE2E監視を実装する検討を開始しました。

== 監視の構成

E2E監視システムは、SMSの送受信を行うSMS送受信シミュレータ、監視結果を表示する監視ダッシュボード、シミュレータと監視ダッシュボードを連携させるWeb APIの3つで構成されています。以下、それぞれについて少し詳しく説明します。

//image[06_001][E2E監視システムの構成]

=== SMS送受信シミュレータ

SMSのE2E監視を実現するために、SMSの送信・受信をシミュレートする方法を検討しネットで調べたところ、Raspberry Pi@<fn>{fn-0601}とUSB接続のLTEドングルを使ってSMSを送受信を試しているネット記事を見つけました。
Raspberry Piとは、教育目的に製造された小型コンピュータで、現在普及が進んでおり教育分野以外も様々な分野で利用されています。

また、USB接続のLTEドングルは、外出した際にWifi環境がない場合に利用するUSB型のモデムの事を指します。Raspberry PiからATコマンドと呼ばれるモデムを操作するコマンドをシリアル接続でドングルに流し込む事により、通話やインターネット接続やSMSの送受信などの携帯端末の操作を実行する事ができます。今回は、ATコマンドを使ったSMSの送受信の処理をスクリプトとして実装する事によって、SMS送受信シミュレータを実現しました。詳しくは実装パートで説明します。

//footnote[fn-0601][https://ja.wikipedia.org/wiki/Raspberry_Pi]

//image[06_002][SMS送受信シミュレータ]

=== 監視ダッシュボード

私の属している部署で運用・保守しているサービスは、自社内製の監視ダッシュボードでE2Eの監視の状態を確認できるようになっています。監視の方式は統一されている事が望ましいと考えたため、SMS送受信シミュレータの送受信結果は監視ダッシュボード上に表示させる事にしました。ダッシュボードは社内の商用ネットワークに属しており、SMS送受信シミュレータとダッシュボードを直接連携させるのは、セキュリティー上避けたいと考えました。連携については、後述するデータ連携用のWeb APIを利用して連携するような方式としました。

=== データ連携用のWeb API

シミュレータでのSMSの送受信結果をダッシュボードに表示させるために、部署で契約しているGoogle Cloud Platform(GCP)上にWeb APIを構築しました。社内でのクラウド利用については、2つの要件を満たせば利用が可能となります。Cloud環境を社内で使ってみたいと考えている方は、実装の前に、会社の利用ルールや部門の予算の状況を確認する事をおすすめします。

=== 予算の確保

クラウド利用に当たって、部門でクラウド利用のための予算を取っているため、利用に当たってどのくらいお金が当たるかを部門内で説明が必要でした。

=== 社内のセキュリティガイドラインとセキュリティポリシーを満たす事

実装に当たっては社内のセキュリティ部門が提供するセキュリティガイドラインを満たすように実装する必要があります。また、実装後に、社内のセキュリティポリシー的に運用前には必ず脆弱性診断を受け、診断結果が問題ない事を確認して初めて、実装したものを運用開始する事ができます。また、運用を開始してからも年次で脆弱性診断を実施する必要と月次でセキュリティパッチの適用調査をする必要があります。

== SMS送受信シミュレータの実装

SMS送受信シミュレータの要件は大きく2つあります。1つ目は、SMSの送受信を実行できる事、2つ目はインターネットに接続し、SMSの送受信結果をWeb APIを使って登録できることです。

== SMS送受信スクリプトの処理概要

1つ目の要件を満たすために、SMS送受信スクリプトを実装しました。本項では、SMS送受信スクリプトの処理の概要について説明します。

=== ATコマンド投入用のUSBデバイスファイルの認識

ドングルをRaspberry Piに接続すると、デバイスファイルが複数作成されます。スクリプトからシリアル接続する際にライブラリでエラーが出力されるため、wvdial@<fn>{fn-0602}用とATコマンド登録用でUSBデバイスファイルを分ける必要があります。そのためスクリプト上では、ATコマンド投入用のデバイスファイルのパスを定義しています。複数のドングルを接続すると、デバイスファイルとドングルの紐づけができなくなるため、デバイスファイルを固定化する対応が必要となります。具体的には、udevルールに定義する事によってデバイスファイルを任意の名前に固定化する事ができます。USBの接続ポートやドングルのシリアルの情報で固定化できるのですが、利用しているドングルはシリアルの情報がなかったため、USB接続ポートで固定化を実施しています。

//footnote[fn-0602][https://wiki.archlinux.jp/index.php/Wvdial]

=== SMSの送受信

SMSを送受信する前に、SMSの送受信できる状態であるかどうか、ネットワーク状態(以下 NW状態と記載)の判定を実施しています。NW状態の判定には、ATコマンドで電波強度確認、在圏状態の確認を実施しています。また、SMSの送受信を可能にするために、SMSモード設定コマンド等を実施しています。ドングルでSMSを送受信する際に注意が必要な点は2つあり、1つ目はSMSの文字コードで、正しく設定しないと文字化けをします。実装したシミュレータではGSMに設定しています。2つ目はSMSの読み込み先、書き込み先の設定です。読み書きでそれぞれ端末かSIMカードで保存するかを設定する事ができますが、書き込み先と読み込み先を一致させる必要があります。今回の場合ドングル上かSIMカード上かになりますが、受信したら都度削除するシナリオになっているので、SIM上を保存先として指定しています。

=== Web APIで送受信結果をPost

SMSの送受信の試行を実施後、Web APIのユーザとパスワードで認証トークンを取得し、認証トークンでSMSの送受信結果をPOSTします。工夫したところはWebAPIのユーザとパスワードの秘匿性を上げるために、パスワード管理モジュールを使って、スクリプト内に認証情報を直接埋め込まないようにしています。スクリプト内にパスワード等の情報を埋め込んでしまうとスクリプトが誤って外部に公開された場合、認証が危殆化するリスクがあると考えたため、実装はやや煩雑になりましたが対策を実施しました。

== インターネット接続処理の概要

2つめの要件を満たすためにwvdialと呼ばれるPoint-to-Point Protocol ダイアラをインストールしてインターネットへの接続を可能としています。インターネットへの接続には、wvdialの設定ファイルの編集とATコマンドを使ってドングルへの設定投入が必要でした。設定ファイルには、ドングルのデバイスファイルのパス、ドングルに搭載したSIMのAPNの情報を設定します。次に、ドングルへの設定についてですが、ドングルにATコマンドを投入して通信事業者のネットワークに接続します。設定に必要なATコマンドを@<hd>{id06-1}に記載しています。
シミュレータはQuectel製のLTEチップが実装された、SORACOM Onyx LTE USBドングル@<fn>{fn-0603}を利用しており、@<hd>{id06-2}と@<hd>{id06-3}については、Quectel製のオリジナルのコマンドとなります。

//footnote[fn-0603][https://soracom.jp/store/7326/]

== ドングルに設定必要なATコマンド

==={id06-1} APNの設定

AT+CGDCOUNT=1,”IP”,”利用するAPN名”

==={id06-2} APNのユーザとパスワードの設定

AT+QICSGP=1,1,”APN名”,”ユーザ”,”パスワード”,0

==={id06-3} Packet Data Protocol(PDP)有効化
AT+QIACT=1

== Web APIの実装

Web APIはGCP上のGoogle App Engine(GAE)@<fn>{fn-0604}とCloud SQL@<fn>{fn-0605}を使って実装しました。また、運用の負荷をかけずに、実装は柔軟にしたいという考えでPaaSを利用して実装しており、GAEは認証APIと登録APIと結果取得APIを提供しています。また、Cloud SQLにはシミュレータで実行したSMSの配信結果情報が登録APIで保存されています。また、このWeb APIはインターネット上に公開しているため、以下のようなセキュリティの対策を行っています。

//footnote[fn-0604][https://cloud.google.com/appengine?hl=ja]
//footnote[fn-0605][https://cloud.google.com/sql?hl=ja]

=== ファイアウォールで接続IPを制限

GAEはファイアウォールの機能を提供しており、GAE上にアクセスするIPを制限する事ができます。今回接続するシミュレータのIPとダッシュボードのIPに接続を制限しています。接続するシミュレータのIPは事業者毎によって振られるものとなるため、広いレンジで制限をかけています。

//image[06_003][ファイアウォールルール画面]

=== 認証キーの提供と有効期限の短時間化

結果取得API、認証APIを実行するためには、認証APIで取得した認証キーを必要とするように実装しています。また、そのキーの有効期限については非常に短い期間に設定しています。有効期限を長くすると、キーが第三者に漏洩した場合、情報漏洩や不正アクセスのリスクが高まるためです。

=== 入力値のバリデーション機能とプレースホルダの利用

SQLインジェクションの対策として、スクリプトではバリデーション機能とプレースホルダを実装しています。バリデーションは公開されているオープンソースのライブラリを利用して実装しています。APIの入力値についてルールを設定し、ルールに違反する入力値に関しては、エラー応答を返すようにしています。プレースホルダについても公開されているオープンソースのライブラリを利用して実装しています。入力値内に特殊文字があればエスケープを実施し、想定外のSQLが実行される事を防ぎます。

=== リクエスト数とリクエストエラーの監視

GCPが提供するCloud Monitoring@<fn>{fn-0606}でリクエストエラーとリクエスト数を監視しています。Cloud MonitoringではAPIの実行ログやメトリクスを確認できます。また、Cloud Monitoringが提供するアラート機能によって、メトリクス等に閾値を設定し、リクエストのエラーやリクエスト数が設定した閾値を超過した場合は、メール等で異常を知る事ができます。

//image[06_004][アラート機能画面]

//footnote[fn-0606][https://cloud.google.com/monitoring?hl=ja]

== 自社内製の監視ダッシュボード側の実装

シミュレータとWebAPIについては自身で実装をしましたが、自社内製の監視ダッシュボードの実装については、実装をする専門の部隊がいたため、実装を依頼しました。監視ダッシュボードに実装が必要な機能は、定期的に結果取得APIでSMSの配信結果を取得し、ダッシュボード上にOK or NGを表示させるというものです。実装を専門部隊にお願いするにあたって、E2E監視の構成やAPIの仕様書を起こして、要件を実装部隊に伝える必要がありました。E2E監視の構成やAPIの入出力の情報や期待する処理フロー等をパワポで作成して要件を伝えて、無事に期限内に実装がされました。今回、実装を依頼する際にAPIの仕様をパワポにわざわざ起こして実装を依頼したのですが、Google先生に聞いてみるとSwagger@<fn>{fn-0607}と呼ばれる、Web API開発環境がある事を知りました。Swaggerを使えばWeb APIの設計、ドキュメントの自動生成、テスト等が効率良くできそうなので、今後Web APIを構築する機会があれば使ってみたいと思います。

//footnote[fn-0607][https://swagger.io/]

== 初期費用とランニング費用

構築と運用にかかる費用としては、以下の初期費用とランニングコストが発生します。基本料とSMS送信料金のランニングコストについては月6万円程かかってます。現状、ランニングコストに月10万円程かかっていますが、ランニングコストの累計額が、ベンダーから提示されたリプレイスの見積もりに達するのは、何百年先になるので費用効果については十分あったと考えています。

 * 初期費用
 ** シミュレータの実装費用
 ** SIM初期契約料

 * ランニング費用
 ** GAEとCloud SQLの費用
 ** 通信事業者の基本料+データ使用料
 ** SMSの送信費用

以下、それぞれの詳細について紹介いたします。

== 初期費用について

シミュレータはRaspberry Piとドングルの費用で1台大体2万円ぐらいかかります。半導体不足の影響でRaspberry Piの値段が上がっているようなので、今はもう少しかかるかもしれません。SIMの初期契約料については、MVNOのソラコムさんが提供している特定地域向け IoT SIMを契約していて、初期費用はDCMのSIMで3,300円、AUのSIMで1,650円でした。

== ランニング費用について

=== GAEとCloud SQLの費用

GAEについては、安定性と不要に料金追加を防ぐためにインスタンスについてはオートスケールではなく、固定化していて、念のためインスタンス数は2つにして冗長化しています。

Cloud SQLに関しては処理も多くなく、ストレージの容量も必要ないので一番低いスペックとしました。クラウド側のランニングコストに関しては、1ヵ月にGAEが2万円、Cloud SQLが8千円程となっています。
GAEとCloud SQLのスペックについては以下の通りです。約0.5rec/sを処理しています。

 * GAE
 ** 環境:Standard
 ** リージョン:asia-northeast1
 ** インスタンス数:2
 ** インスタンスクラス:B1

 * Cloud SQL
 ** リージョン：asia-northeast1
 ** DB：MySQL
 ** マシンタイプ：標準
 ** vCPU：1
 ** メモリ：3.75
 ** ストレージ：10G

=== 通信事業者の基本料+データ使用料

通信事業者の基本料とデータ使用料については、月300MB分のデータ使用量が基本料に含まれ、超過した際は追加でデータ料を支払う料金体系となっていて、契約したSIMにつき数百円/月の料金が発生します。

=== SMSの送信費用

SMSの送信費用については、自事業者同士のSMS送信に関しては無料ですが、異なる事業者同士のSMS送信については、費用が発生してしまいます。SMSの送信については1通3円かかり、サービス仕様上の1日に送信できる通数の制限が200通のため、上限にかからないように送信をしています。

== 運用について

SMS E2E監視の運用について説明します。監視システムに関わるコンポーネントがシミュレータ、GCP、監視ダッシュボードが多い事から誤検知が多くなり、従来より監視品質が低下する事が想定されました。そのため、以下の3つの対処を行う事によって、誤検知か障害かを切り分けています。

=== 対処1: 複数の監視シナリオで監視する。

シミュレータに異常が発生するケースに対する対処です。2台のシミュレータで監視シナリオを2つ用意しておき、2つの監視シナリオがNGとなった際は障害と扱うように運用フローとして立てつけました。この対処により、シミュレータ故障による障害の切り分けが可能となります。

=== 対処2: 複数の監視手段を用意する

Web API側に異常が発生するケースに対する対処です。シミュレータ⇒Web API⇒監視ダッシュボードとは別の監視手段として、シミュレータからのSMSの送信・受信のログを監視しシステムのアラームとして発報させるようにしています。監視ダッシュボード上NGかつ上記のログ監視のアラームが発報した場合は障害と扱うような運用フローを立てつけています。

=== 対処3: 複数のネットワークからAPIを叩く

監視ダッシュボードに異常が発生するケースに対する対処です。監視ダッシュボードとは別に誤検知確認ツールをGoogle Apps Scriptで実装しています。誤検知検知ツールは監視ダッシュボードと仕様は同じでSMSの配信結果取得APIを定期的に叩いて、その結果をスプレッドシート上に表示させるようにしています。監視ダッシュボードと誤検知確認ツール双方NGの場合障害と扱うようにしています。

運用は少し煩雑となりますが、複数のパターンを用意しておき、組み合わせによって監視の確度を上げる対策をしています。E2E監視を入れていない場合は、システム監視担当が実端末を使って手動でSMS送受信のテストを実施していましたが、E2E監視を導入する事によって、手動でのSMS送受信テストを実施せずに良くなりましたので、現場の工数削減にも寄与できたと考えています。

== まとめ

今回、Raspberry Piを利用したSMSサービスのE2E監視を実装した経緯、システム構成、システムの実装、運用についてご紹介させて頂きました。
シミュレータの実装、GCPの機能、構築の費用、監視・運用等の雑多な内容になってしまいましたが、何か一つでも困りごとを解決する糸口になれば幸いです。
