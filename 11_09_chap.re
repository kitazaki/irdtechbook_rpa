= フローで思い通りの結果を得るために大切なこと

//flushright{
髙井 美佑
//}

== はじめに

みなさま、ごきげんよう。
突然ですが、Power Automateでフローを組んで、テストして、無事に成功した時、安心してそのままウィンドウを閉じていませんか？
「フローが成功しました」という表示は「エラーなしで正しく実行されました」という意味で、「作成者であるあなたの想定通りに実行されました」という意味ではありませんよ？

さて、あなたが今閉じてしまったそのフロー、本当に「想定通り」の動きをしているでしょうか？　不安になってきませんか？
本章では、フローが「想定通り」に動いているかどうかの確認方法を実際のユースケースを見ながら、解説していきます。
ぜひ最後まで一読頂き、想定通りの処理が行われているかどうかの確認方法を身に着けて頂きたいと思います。フローの処理に不備があったがために、偉い人に「手作業憐みの令」を出されないように。

== テストは、2段階に分けられる

ITを本職とされている人よりも知識が薄い市民開発者が忘れがちなのは、テストは次の2段階に分けられるということです。

 1. テスト機能を使用したフローの動作テスト
 2. 作成者が期待する「正常な動作」が行われているかの確認

1.は、ほとんどの人が当たり前のように行っていることと思います。
問題は2。作成者が期待する「正常な動作」が行われているかの確認です。これは、フローのテスト結果の中身を確認したり、フローの外に出力された結果(EX：フローで投稿したTeams のメッセージ）を確認したりすることが必要です。

フローが成功していても、作成者が期待する「正常な動作」をしていないこともよくあります。市民開発者は、Power Platform での開発が初めての開発経験という方も多く、1.のテスト機能を使用したフローの動作テストが成功すると安心してテストをやめてしまうこともあるのです(かつての私がそうでした）
そのため、実際のユースケースを通して、2.の確認方法を学んでいきたいと思います。

== Case アップロードしたはずのファイルが開かない

=== どんなフローか

//image[09_001][どんなフローか]

このフローは、指定されたSharePoint リストにレコードが作成された時にそのレコードについている添付ファイルを取得し、その添付ファイルを指定されたドキュメントライブラリにアップロードし、Teams にドキュメントライブラリへのリンク付きメッセージを投稿するという動作をします。

=== このフローで期待される正常な動作はどういうものか

 * 新しいレコードが作成された時にフローが実行されること

//image[09_002][新しいレコードが作成された時にフローが実行される]

 * Teamsにファイルのリンク付きメッセージが投稿されること

//image[09_003][Teamsにファイルのリンク付きメッセージが投稿]

 * メッセージのリンクをクリックしたら、ファイルが表示されること

以上3点が作成者である私が期待する正常な動作です。

=== テスト機能を使って、フローの動作テストを行う

フローを作成したら、まずはテスト機能を使って、動作テストを行います。
動作テストは、画面右上の「テスト」ボタンをクリックすると行うことができます。

//image[09_004][テスト機能1]
//image[09_005][テスト機能2]

最初のテストは「手動」から行います。
今回のトリガーは、SharePoint リスト のレコードの新規作成なので、テストボタンを押した後にレコードの新規作成を行ってください。

//image[09_006][SharePointのレコードの新規作成]

そうすることでフローが実行されます。
テストが成功すると、緑色で「ご利用のフローが正常に実行されました」という通知が出てきます。

//image[09_007][フローの実行]

ちなみに2回目以降は、1回目のデータを利用して、「自動」からテストを行うことも可能です。

//image[09_008][自動からテストを実行]

=== 出力結果が正常な動作をするか確認する

フローが成功し、無事 Teams にメッセージが投稿されたので、リンクをクリックして、ファイルを確認してみます。

//image[09_009][出力結果]

すると、なんということでしょう！！
「ブックを開くことができませんでした」というメッセージが表示されています。
これはExcel 固有の現象なのか、それとも画像など他のファイルでも同じようになるのか調べるために、画像のリンクもクリックしてみます。

//image[09_010][画像の表示]

すると、画像も開くことができませんでした。ものの見事に真っ暗です。
つまり、「なんらかの事情でメッセージにあるリンクが開けない」というバグが見つかりました。

=== 「心当たり」をすべて確認し、問題を切り分ける

バグの修正は、無くしたものを探すことと似ている気がします。
例えば財布を落とした時、どうするでしょう？
最後にどこで使ったかを考え、最後に使った場所から現在地までどのように行動したかを思い出して、財布を落としたかも？と心当たりのある場所を1か所ずつ訪れて、探していきませんか？
バグの修正も同じです。「心当たり」を1か所ずつ確認していきます。
私は、2つの「心当たり」があります。

 * 実はフローが失敗している(テスト結果は見間違いだった）
 * 添付ファイルがドキュメントライブラリにアップロードされる過程で壊れた

=== 実行履歴を確認してみる

フローのテストを実行し、成功通知を確認しているとはいえ、バグが出ている以上は本当に成功しているのかの確認は必要です。実行履歴を確認してみましょう。
フローの編集画面左上の「←」ボタンをクリックして、1つ前の画面に戻ります。

//image[09_011][1つ前の画面に戻る]

「28日間の実行履歴」から先ほどのテストの日時をクリックしましょう。

//image[09_012][28日間の実行履歴]

すべてのアクションに緑のチェックマークがついていて、画面上部に成功通知も出ています。間違いなく成功していることが確認できました。

//image[09_013][正常に終了]

=== ファイルサイズを確認してみる

フローが正しく動作していることがわかりました。それならば、なんらかの原因でファイルが壊れている説が有力になってきますね。
添付ファイルと同じものがドキュメントライブラリに正しく保存されていれば、ファイルの大きさも全く同じなはず……。なので、元データとドキュメントライブラリ保存のファイルサイズを比較してみることにします。

//image[09_014][元データ]
//image[09_015][ドキュメントライブラリのデータ]

比較してみると、明らかにサイズが異なります。
元データは単位が「KB(キロバイト）」なのに対し、ドキュメントライブラリ側は「B(バイト）」です。元データよりもファイルが小さすぎることがわかりました。
ここで思い出してほしいのは、ドキュメントライブラリのファイルは Power Automate のフローで作成しているということです。
つまり、フローの動作テストは成功しているが、フローに何か不具合があるためにファイルが正しく作成されておらず、ファイルサイズが元データと異なる、という状態であることがわかります。

=== ファイルの作成アクションを確認してみる

フローの中でドキュメントライブラリに保存するファイルを作成しているのは「ファイルの作成」アクションです。
このアクションの設定が正しいかを確認していきます。
編集画面から見ると、ファイルの作成アクションの設定は以下のようになっています。

//image[09_016][ファイルの作成1]

実行履歴からテスト時に入力された値を確認していきます。

//image[09_017][ファイルの作成2]

サイトのアドレス、フォルダーのパス、ファイル名は想定通りの値が入力されていることが確認できます。この3つは問題ないでしょう。
でもファイルコンテンツは、不思議な並びの文字列で、この値が正しいものなのかどうか、現時点ではわかりません。改めてファイルの作成アクションとは何かを調べてみる必要がありそうです。

言葉の意味を調べる時は公式リファレンスをあたるのが1番です。今回の場合は、Power Autoamte のフローなので、Microsoft Learn@<fn>{fn-0901} を読み解いていきます。

//footnote[fn-0901][https://learn.microsoft.com/ja-jp/connectors/sharepointonline/]

//image[09_018][ファイルの作成 (出典:Microsoft Learn)]

Microsoft Learn には、ファイルのコンテンツ欄には「ファイルのコンテンツ」を入れると説明されています。では、先ほど「ファイルのコンテンツ」欄に入っていた「Id」はファイルのコンテンツなのでしょうか？

//image[09_019][ファイルのコンテンツ欄]

動的な値から改めて「Id」を確認したところ、「ファイルの識別子」であり、「ファイルのコンテンツ」ではないことがわかりました。
つまり、ファイルの作成アクションの「ファイル コンテンツ」の設定を間違っていたため、ドキュメントライブラリに正しくファイルが作成されていないということがわかりました。

=== ファイル コンテンツ は存在するのか？

ファイルの作成アクションよりも前のアクションで「ファイルのコンテンツ」が取得できていれば、ファイルの作成アクションの「ファイル コンテンツ」に「ファイルのコンテンツ」を入れることができます。
では、今のフローで「ファイルのコンテンツ」を取得できているのでしょうか？
動的な値を検索して、確認してみましょう。

//image[09_020][動的な値1]
//image[09_021][動的な値2]
//image[09_022][動的な値3]
//image[09_023][動的な値4]

「ファイルの作成」アクションの「ファイル コンテンツ」欄にカーソルを当て、「コンテンツ」「ファイル」「ファイルコンテンツ」の3つで検索しましたが、「ファイルのコンテンツ」らしき動的な値は見つかりませんでした。
つまり、新しくアクションを追加して、「ファイルのコンテンツ」を取得しなければならないということがわかりました。

=== どのアクションで「ファイルのコンテンツ」を取得するか

取得したいファイルのコンテンツは、レコードの添付ファイルのコンテンツです。
ゆえにレコードの添付ファイルのコンテンツを取得するには、どうすればいいかを考える必要があります。
わからないことがある時は、公式リファレンスに立ち返るのが1番です。
今回もMicrosoft Learn を読み解いていきたいと思います。

SharePoint コネクタのアクション一覧を見ていくと、「添付ファイルのコンテンツを取得」というアクションがあることがわかりました。

//image[09_024_1][添付ファイルのコンテンツを取得 (出典:Microsoft Learn)]

これを使えば、添付ファイルのコンテンツが取得できそうです。
Microsoft Learn のアクション名をクリックして、詳細ページに飛んでみましょう。

=== 「添付ファイルのコンテンツを取得」アクションを理解する

初めて見るアクションは、Microsoft Learn で確認。
ここまで読み進めた皆さんは、きっと覚えられたと思います。

//image[09_025][添付ファイルのコンテンツを取得 (出典:Microsoft Learn)]

Microsoft Learn を読むと、ファイルが添付されたレコードのID と 添付ファイルのファイル識別子がわかれば、添付ファイルのコンテンツを取得できるということが理解できます。

=== フローをコピーし、「添付ファイルのコンテンツを取得」アクションを追加する

いよいよ「添付ファイルのコンテンツを取得」アクションを追加して、「ファイル コンテンツ」を取得したいところですが、まずはフローをコピーしておきましょう。
フローをコピーすることで現在のフローをそのまま残すことが可能になり、差分比較が行いやすくなります。
フローは「名前を付けて保存」でコピーできます。

//image[09_026][フローのコピー1]

コピーしたフローはデフォルトでオフになっていますので、オンにしてから編集しましょう。

//image[09_027][フローのコピー2]

「添付ファイルのコンテンツの取得」アクションは、添付ファイルを1つずつ取得しなければならないので、Apply to each アクションの先頭に入れます。

//image[09_028][添付ファイルのコンテンツの取得]

=== ID と ファイル識別子が取得できるか確認する

では、先ほどのファイルのコンテンツと同様に、IDとファイル識別子が現在のフローで取得できているのかを確認しましょう。
動的な値で「id」を検索した結果は画像の通りです。

//image[09_029][動的な値]

項目名の下の説明で、「項目が作成されたとき」の「ID」が「ID」に、「添付ファイルの取得」の「Id」が「ファイル識別子」になりそうだということがわかりました。
実際にアクションに動的な値を入れ込んでみると、こんな感じです。

//image[09_030][添付ファイルのコンテンツの取得]

=== 「ファイルの作成」アクションの設定し直す

「添付ファイルのコンテンツの取得」アクションの設定が完了しました。
これで「ファイルのコンテンツ」が取得できるようになるはずです。では改めて、「ファイルの作成」アクションの「ファイル コンテンツ」にカーソルをあてて、動的な値を検索してみましょう。

//image[09_031][動的な値]

無事に「添付ファイルのコンテンツの取得」の「添付ファイルのコンテンツ」が出てきました。こちらを「ファイル コンテンツ」に入れていきましょう。

//image[09_032][ファイルの作成]

これで「ファイルが破損している可能性」を潰したことになります。
改めてテストを行っていきましょう。

=== フローをテストし直す

テスト機能を使用して、再びフローの動作テストを行います。
最初のテストと同一の環境で行うために、1回目のテストでドキュメントライブラリにアップロードしたファイルは、すべて削除しておきましょう。

//image[09_033][ドキュメントライブラリ]
//image[09_034][テストの実行]

フローの成功が確認できました。

//image[09_035][フローの実行]

前回同様、想定する「正常な動作」の確認をしていきます。
まずは、Teams にメッセージが投稿されているかを確認します。

//image[09_036][メッセージの投稿]

きちんと投稿されていました。
次にメッセージのリンクが開くかどうかを確認します。
1つ目のリンク「hokou_data_W3」をクリックします。

//image[09_037][Excelファイル「hokou_data_W3」の表示]

Excel ファイルが問題なく開きました。
2つ目のリンク「MG_1068」もクリックしてみます。

//image[09_038][画像ファイルの表示]

こちらも問題なく開きました。
ドキュメントライブラリ上のファイルサイズも確認しておきましょう。

//image[09_039][元データ]
//image[09_040][ドキュメントライブラリ上のデータ]

元データとほぼ同じ大きさで、ファイルが作成されていることがわかりました。
これでデバッグ完了です。作成者の想定通りに正しく動くフローができました。

== バグのない正しいフローを作るために

バグのない正しいフローを作成するためには、テストが非常に重要です。
アクション数が少ない小さなフローなら、頭の中でテスト項目を思い描いてテストすることも可能ですが、アクション数が多いフローやPower Apps など他のツールと連携するフローは頭の中でテスト項目を思い描いても、どうしても抜け漏れが出ることも多いです。
そのため、バグを確実に潰した正しいフローを完成させるにはテスト項目を洗い出し、1つずつ確認していくことが必要です。
最後の効率よく抜け漏れのないテストを行うためのコツを書いていきます。

=== テスト項目ってどうやって洗い出すの？

Power Automate の場合は、想定通りの「正常な動作」が何かを考え、それを書き出して確認していくのが良いです。
今回のフローの場合は、以下の通りです。
S
 * harePoint リスト にレコードが作成された時にフローが実行される。
 * Teams にリンク付きメッセージが投稿される。
 * メッセージの中にあるリンクを開くことができる。

=== テスト方法と想定結果、実際の結果を一覧表にして確認する

テストを漏れなくきっちり行うためには一覧表にするとわかりやすいです。
次の表は、最初のテスト結果をまとめてみました。

//image[09_041][テストの一覧表]

テスト方法の太字部分はテスト方法のタイトル、下の文章はテストの方法を説明しています。想定結果がいくつかある場合は、テスト方法のセルを結合させて、ひとまとまりに見えるようにしています。
この方法の良いところは、4つあります。

 * Excelなどの表が作成できるソフトを使うと、不足分の付け足しが簡単。
 * 方法と想定結果/実際の結果が1行にまとまって見やすい。
 * 確認事項が記録されるので、抜け漏れがなくなる。
 * チームでの確認が行いやすい。

あくまでも一例ですが、テストで迷った時はぜひやってみてください。
きっと以前よりも安心感のあるフローが作成できると思います。

== 終わりに

今回、Power Automate でのバグの潰し方とテスト方法を紹介いたしました。
この2つを本書で紹介しようと思ったのは、実は Microsoft Build がきっかけです。Microsoft Build では、Windows や Power Platform をはじめとする数多くの製品へのAI 搭載が発表されました。

Power Automate でも米国プレビュー環境のみですが、 Copilot が実装されており、フローの作成は自然言語のみで可能となりつつあります。しかしCopilot はあくまでも「副」操縦士です。作成者のあなたの思考ややりたいことを完璧にトレースできるわけではありませんし、時には間違った解釈をしてしまうこともあります。
簡単に動くものが作成できる時代だからこそ、フローが「想定通り」に「正常な動作」をするかどうかを確認するテスト作業は今後ますます重要になってきます。

皆さんにはぜひ入念なチェックに時間を使っていただき、楽しくAI と共存する世界の担い手となって頂きたいと思います。
ここまでお読みいただき、ありがとうございました。
