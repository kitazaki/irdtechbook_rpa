= RPAをいれたり自動化を検討する前に考えたい事

//flushright{
山田 雄一
//}

== はじめに

RPAを導入したり、自動化を検討したり、DXを始めたい、またそれ以前の話として現状の情報システムを改善したい…… と思ったこと、ありませんか？
また、自分は乗り気でなくても、上から社命として言われてしまったり@<fn>{fn-0201}したこと、ありませんか？

筆者としては、ここ数年(2015年、16年以降)は、RPAやノーコード、ローコードツールが一般的になった事により、単純なシステムリプレース以外に、取れる選択肢がずいぶんと増えたな……という印象があります。
また既存システムにちょい足ししてみたり、既存システムのデータエントリー部分をノーコード、ローコードツールを使うようにすることで、こういった業務上の課題を解決できるかも……？ という機運が高まってきており、実際に活用例も多くなってきているように思います。

これらのRPA系のツールは、「RPA系のツールを使えば業務改善ができる」っぽく見える事が多いのですが、実際は打出の小槌のようにあらゆる業務改善や課題解決に効いてくれ、私達の業務を楽な方へ導いてくれるものなのでしょうか？

この章では、こういった時に何を判断基準にしたり、どういった懸念点があるのかをまとめてみました。RPA導入以前の検討段階として、「RPAを導入したり、自動化を検討する」までに必要な検討の助けになり、ある程度@<fn>{fn-0202}の道筋を示せれば良いなと思っています。

//footnote[fn-0201][こっちの方がもっと深刻である]
//footnote[fn-0202][もちろん筆者の個人的な考えと独断と偏見によるものです]

== 世の「情報システム」にも色々ある

世の中には色んな会社があり、色んな業務プロセスがあり、そして色んな情報システムがあります。

情報システムについては、色々なものがありますが、ターゲットを絞らないとこの手の話はついつい発散してしまうものなので、参考となりそうなケースを次の様に分けてみましょう。

 * スクラッチ開発の自社基幹システム
 * パッケージソフトを使った自社基幹システム
 * 自前システム（SQLServer+AccessVBAとかでしっかり目の構成のもの）
 * 自前システム（と呼べるかどうかわからないけどExcel+VBAぐらいのもの）
 * システムなし

これらについて、それぞれ次のような対応策を今回は考えてみましょう。

 * 今のシステムを改修して隙間を埋める
 * RPAで隙間を埋める
 * RPAじゃないツールで隙間を埋める
 * 今のシステムをそのまま諦めて使う
 * 人を増やす

上で挙げたそれぞれの @<b>{システム✕対応策} について、それぞれの対応策の場合の検討ポイントをそれぞれ考えていきたいと思います。

== SIerによるスクラッチ開発の自社基幹システム

SIerによる受諾開発（スクラッチ開発）で納品され、運用されている自社基幹システムの場合、受諾開発という契約の特性を考える必要があるケースがあります。

=== 今のシステムを改修して隙間を埋める

この対応策は、開発してもらったSIerに再度追加改修をお願いする事になることが多いですが、改修時のコストがかさむ事もあります。

また、SIerの開発人員も暇ではないので、継続的に追加改修をお願いしていない場合、改めて追加改修をお願いしたとして、実際に当時作っていた人が継続して対応してくれるか、品質が担保@<fn>{fn-0203}されるか、みたいな所が悩ましくなることもあります。だいたい裏側は分かんないので……

また筆者の実体験として、継続的に改修を行っているシステムであれば、継続改修されているのでコストもそこまでかからない事もありますが、しばらく触っておらず、時間が経ってから改修を行うようなケースでは、過去のことを思い出す/既存システムの解析にもコストがかかるので、結構地味に大変だったりします。（大変なときは総じて見積もりに跳ね返ります。）

//footnote[fn-0203][ここで言っている品質とは単に「バグがない」というだけではなくて、ソースコードの保守性であったり、応答速度であったり、データ量であったりといった非機能要件も含みます。]

=== RPAで隙間を埋める

現行システムの改修と比べ、RPAで隙間を埋めた時の最大の利点は、「システムの内部を修正していないのに、業務オペレーションは簡単にできる(かもしれない)」点です。

RPAは良くも悪くも「画面操作をするツール」で、システムの内部を修正しませんが、これはケースによっては大きなメリットになります。

#@# 後で改行を有効化
#@# //blankline

@<b>{○うれしいケース１}

たとえば、社内でISO認証などの外部監査がある認証を取得しており、この監査情報の取得や集約がシステムに組み込まれている場合、社内システムの改修をすると、改修箇所（時によっては監査箇所全般）の処理内容について、再度監査が必要になってしまうケースがあります。

ところが、RPAでの業務改善を行うとあら不思議！ 社内システムから見ると、「画面操作をしているだけ」ですね！

これならどんな改善をしても安心！

#@# 後で改行を有効化
#@# //blankline

@<b>{○うれしいケース２}

たとえば、最初のスクラッチ開発はSIerに頼んだが、その後の改修については他社に頼んだり、自分たちで行うケースもあるかもしれません。（プロジェクト炎上したりするとありがち）

よく受諾開発の契約書にはあるあるなのですが、システムを開発納入した会社以外が改修した場合は、納入会社はシステムの瑕疵担保責任をその後一切追わない　とする契約となっているケースがあったりします。（責任を負えなくなるのでそれはまあ当たり前といえば当たり前）

こういった場合に、システムを直接改修するのではなく、RPAを使って改善を行った場合、やはり社内システムから見ると、「画面操作をしているだけ」になるのでシステム利用時の瑕疵担保責任が継続され、そういった点でも安心だったりします。

=== RPAじゃないツールで隙間を埋める

RPAじゃないツールで隙間を埋める　というのもケースによっては非常に効きます。

基幹システムを作ったはいいが、そんなに今後長いことこれを使わないと思うので、システム自体に@<b>{改修は入れたくない、でも現状の業務は厳しいので改善をしたい}だとか、RPAではやりにくい@<b>{大量データの捌きを行った上で、処理を実現}する必要がある……　といった場合に、たとえばETLツールがハマったりする事があります。

ただ、RPAじゃないツールの場合において、データのI/OはAPI経由だったり、DBへの直接アクセスが手段になりがちなんですが、パフォーマンスが劣化したり、本来の基幹システムからのデータI/OではないI/O（特に書き込み処理）が発生するので、既存システムとのそういった所の統制を取ったりするのが思った以上に大変なのと、当然ながら前述したような監査があるシステムの場合、悩ましい事になります。

=== 今のシステムをそのまま諦めて使う

改修コストとそれにともなって得られるメリットが見合わない場合はこうなりがちです。やむを得ないのです……

=== 人を増やしてオペレーションで解決

人を増やして対応するのはある意味最強の一手です。ハネムーン係数なども改善するかもしれません。やったね！業務が強くなるね！

※ただしボトルネックに人が増えない場合はなにも変わらず教育コストだけがかさむケースも……

== パッケージソフトを使った自社基幹システム

パッケージソフトの場合にはパッケージソフトならではの検討ポイントがあるのでは？と筆者は考えています。

=== 今のシステムを改修して隙間を埋める 

そもそも、大規模な基幹パッケージ（例えばSAPとか）を入れていて、既に運用が回っているフェーズならば、システムを改修したいと考える会社であれば、ほぼほぼアドオンによるカスタマイズが入った状態になっているはずで、その上で現在のシステムと業務にギャップが発生しているので、そこに更にアドオンによるカスタマイズを付け加える形（付け加えたいと考えている状態）になっているのでないかなと考えられます。

ただパッケージソフトのカスタマイズというのは、一般論でいうと２割の処理にカスタマイズを入れるのであればフルスクラッチで作るのとコストが変わらないと言われているぐらいのもので、非常に開発コストがかかるものです。

また、一般的な大規模パッケージのベストプラクティスは「極力カスタマイズなしで使い、業務をパッケージに合わせる」となっている事が多く、そういった意味でも改修は悪手となりがちですが、現場要望もあって、情シスとしても押し負けてしまうことが多く、なかなかそういった理想的な形にはならない実情がありますね……

====[column]パッケージソフトにおいて、カスタマイズがないとなにが嬉しいのか？

カスタマイズなしで使うと何が嬉しいかというと、パッケージのバージョンアップの際にカスタマイズはすべて見直しが要る事が多く、カスタマイズがなければパッケージのバージョンアップがサクサクで進むので、維持管理コストがずいぶん軽くなるのです……（カスタマイズがあればあるほど、再検証や再開発のリスクが上がる）

====[/column]

なお、大規模パッケージを使う時にも、会計系の箇所については原則として一切カスタマイズを入れないケースが多く、これは前述の「監査がある場合」に近い話が待っている事が多いです。

具体的には、こういったパッケージを入れる時の大きなメリットの一つとして、会計監査の省力化があげられます。

フルスクラッチで会計システムを構築した場合、大きな企業さん@<fn>{fn-0204}では担当の会計事務所にシステムの監査をして貰う必要があり、これが経理担当の悩みのタネだったりするのですが、有名な会計パッケージであれば、それをそのまま素直に使ってさえいれば、ある程度の会計システムとしての正しさをパッケージが保証してくれるため、会計的にチェックすべき点が相当シンプルになり、会計事務所が嬉しいので、経理担当も非常に嬉しいんだそうで……

//footnote[fn-0204][上場してたりだとか…]

=== RPAで隙間を埋める 

こういったケースでもやっぱりRPAはオイシイです。
だって、画面しか触らないですからね。

また、前述の「２割の処理にカスタマイズを入れるのであればフルスクラッチで作るのとコストが変わらない」みたいな話を、パッケージソフト側ではなく、その外で持てるようになるので、そういった意味でも良いです。

加えてコスト面でも有利なことがあります。フルスクラッチ開発と比べても、大規模パッケージのカスタマイズができる人というのは、そのパッケージに精通したコンサルレベルのSEであることが多く、そういう人にお願いするとどうしても単価そのものが高くて、結果これが開発コストとして高くなりがちなのですが、RPAであればそういった高単価の人をアサインせずとも、業務改善が実現できるかもしれません。これは嬉しいポイントですね。

=== RPAじゃないツールで隙間を埋める 

RPAじゃないツールも前項の「RPAで隙間を埋める」と同じ観点でオイシイです。
ただ、内部データを直接APIで触る事になるので、投入したデータがパッケージ上でうまく処理されることを検証しておく必要があります。（筆者は実際にそういうテストをやったこともあります……笑）

=== 今のシステムをそのまま諦めて使う 

人生諦めも肝心です。投入コストより回収リターンのほうが少ない場合は「何もしない」が最適解だったりしますよね…（特にパッケージは改修コストがかかりがちなので、ノーカスタマイズで使って人が合わせる方が良かったりすることもままあります。）

=== 人を増やしてオペレーションで解決 

人こそパワー！（※前の「スクラッチ」の話と全く論点は変わらないです）

== 自前システム（SQLServer+AccessVBAとかでしっかり目の構成）

さて、コストをがっつりかけてSIerに基幹システムを作ってもらったりはしておらず、パッケージソフトを入れていない会社というのも意外に多いものです。（私も前職は社内SEだったのですが、このパターンでした。）

=== 今のシステムを改修して隙間を埋める  

自前システムだと改修しやすい面と、改修が難しくなる面があります。

改修し易いポイントは、自前で作っているのでコスト面や対応時間がコンパクトですみます。
改修が難しいポイントは、そもそもそのために人数を多く割いていなかったりするのでマンニングが難しい事があるのと、少人数で開発をする事になるので、そんなチームにエキスパートがごろごろいるわけでもなく、結果として技術的負債が蓄積しやすい点でしょうか。（そのため、改修コストがどんどん上がっていく傾向にあります。）

=== RPAで隙間を埋める  

RPAについては自前システムだと悪手になるケースが多いです。（自分たちでシステムの表も裏も全部ハンドリングできている筈なので、RPAを使うより直接改修したほうが普通は望ましい筈）
さて、RPAを使ったほうが良いケースはあるのでしょうか？

たとえば、自前システムを構築している基盤に無い機能をRPAで簡単に付け足せる場合などは、RPAを導入するメリットがありそうです。(正直、前職ではこのシナリオで少し導入を検討したことがあります。結局入れなかったのですが。)

=== RPAじゃないツールで隙間を埋める  

外部データ連携などをする場合や、新しい機能を実現したい場合など(最近だとAIとか？)、RPAじゃない他のツールが刺さるケースもあるかもしれません。

=== 今のシステムをそのまま諦めて使う  

諦めも肝心です。でもどこかで重い腰をあげないといけないタイミングというのも……

=== 人を増やしてオペレーションで解決  

もうここまで来ると、既存のシステムを守るという観点よりは、新しいシステムや業務プロセス改善を実現するために人を増やす必要があるかもしれません。

== 自前システム（と呼べるかどうかわからないけどExcel+VBAぐらいのもの）や、システムっぽいものが無いかも…？

小さい会社で簡単なシステムを作って運用しているケースも多いでしょう。ExcelVBAなどがよく活躍するケースです。あとは、「情報システム」と言われて思い浮かぶものが無いケースもあるでしょう。

でも、ITが基幹システムのようにしっかりと、連動して動くようになっていなくても、ITを使った業務プロセスが回っているケースなども広義のシステムと言えるかもしれません。

=== 今のシステムを改修して隙間を埋める   

簡単なシステムや小さなマクロに分割されているほど、改修というよりは１つのシステムにまとめていくほうが良いかもしれません。

=== RPAで隙間を埋める、RPAじゃないツールで隙間を埋める

ここはもうツール導入の可否みたいな話で論点がまとまってしまいます。

そもそもの話として、RPAやその他のツールで隙間を埋めるにせよある程度の粒度のシステムになってからな気がします。
その際に、@<b>{ハンドオペレーションが入っている箇所をシステム化し、一気に自動化}できるかもしれません。

なお、それは一般的には「DX」と言います。

改善の伸びしろがいっぱいある状態は、ある意味では良い事なのかもしれません。

=== 今のシステムをそのまま諦めて使う   

まあそんな判断になることもあるかもしれません。投入できるコストは有限ですし。

=== 人を増やしてオペレーションで解決   

これぐらいの規模感だと、「増やせるものなら増やしたい」というのが本音になりそうな。

== 色々と書いてきましたが…

色々なケースを挙げ、RPAが効きやすそうなケース、効きにくそうなケースを様々に検討してみましたが、いかがだったでしょうか？

ちなみに情報システムの再構築における様々な論点については、「SEC BOOKS：システム再構築を成功に導くユーザガイド　第2版〜ユーザとベンダで共有する再構築のリスクと対策〜」という書籍があったのですが、絶版になってしまいました。
ただ、PDFは無料公開されていて、誰でも読めるようになっており、ここに様々な参考となる情報が掲載されています。

@<href>{https://www.ipa.go.jp/archive/publish/secbooks20180223.html}

RPAでの改善を検討する際にも、本来的なアプローチとしては

 * システムリプレースや改修するほどではないね
 * RPAで改善をしようね

という検討結果を経て、その後からRPAでの改善が始まるのでは？　と思いますので、こういったソースにも当たってみて、一読した上で論点整理をしておくと、少し導入がスムーズになるかもしれません。@<fn>{fn-0205}

この記事が最適なITシステム構築、ツール選定戦略の一助となれば幸いです。

//footnote[fn-0205][上長に説明するときとか、資料があると説明力が段違いだったりします]
