= ＲＰＡによるリアルタイム処理

//flushright{
鎌田 誠
//}

== RPAのメリット

RPAの導入目的として「生産性向上」と「品質向上」があります。24時間365日、文句も言わず動いてくれるRPAは、まさに生産性向上のために産まれてきた申し子のようなものですよね。品質向上についても、ヒューマンエラーをしっかりと排除してくれて、常に一定の品質を確保できます。

一方、ここではあまり注視されていないRPAによる「リアルタイム処理」について語りたいと思います。

リアルタイム処理を実装することで、これまで実施できなかった業務ができるようになるなど、大きなメリットもありますので、是非最後までお読みいただければ嬉しく感じます。また本章ではPowerAutomate for desktopで作成したサンプルフローも掲載致します。その他のRPA製品でも同様のフローは作れますので、よかったら参考にしてください。

== RPAのリアルタイム処理とは？

=== リアルタイム処理を知る

製造業でのPRA導入事例として「作業日報の入力作業自動化」など、よくあがる事例です。

工場では、工程1→工程2→工程3→完成品のように、いくつかの工程を通して製品が生産されます。例えば工程2のYさんが機種X1を100台、機種X2を200台、機種X3を35台の作業をしたとしたら、その実績を作業日報に記入します。

//image[05_001][作業日報]

各工程ごとにその作業日報を取りまとめて（例えば、工程2ではYさん含めて10名の方が作業をしていれば、10名分の作業日報）、基幹システムに投入します。作業日報ができるのは作業が終ってからですので、投入できるのは夕方か夜になりますよね。

そうすると、基幹システム上正しい在庫が見えるのは全ての投入が終ってからになります。つまり、翌朝にならないと基幹システム上では正しい在庫が見れないのです。

これは正しい姿でしょうか？

常に最新の「在庫状況」が基幹システム上で見えることで、最適な判断ができます。最新の在庫が基幹システム上で見えない以上、現場に赴き在庫状況を確認しなければならず、非常に無駄な作業となります。

しかし、現実はそこに人手を割いてでも最新にするのが難しく、結果、翌朝にならないと在庫が見えない状況になっている工場も多いです。

そこで、RPAによるリアルタイム処理が活きてきます。必要な時にシナリオを動かすのではなく、リアルタイム処理では常にシナリオが動き続け、必要な条件が揃った際に必要な処理をさせることが可能となります。

先ほどの例では、Yさんが各機種の作業を完了した際にシナリオが自動的に動き始める仕組みです。これにより、常に最新の在庫状況が見れるようになります。

//image[05_002][工程移動フロー(改善前)]
//image[05_003][工程移動フロー(改善後)]

=== リアルタイム処理のメリット・デメリット

このように、本来実施したかったにも関わらず、人が実施するには現実的ではないような作業でも、RPAなら実現可能なのです。
ただし、RPAでリアルタイム処理を実現させるためには、いくつかのメリット/デメリットがあります。

メリット

 1. 常時動いているため、都度都度シナリオを実行する手間がない。
 2. 必要なタイミングで自動で処理を実行してくれる
 3. 処理A,処理B等複数の処理を埋め込むことで、1ライセンスでも複数処理が可能

デメリット

 1. トリガーとなる電子的な仕組みが必要
 2. シナリオが複雑化しやすく、エラー時の原因がわかりにくい
 3. RPAでPCを占有してしまうため、専用のPCが必要となる

このようにみると、良いことばかりではありません。特にシナリオが複雑化しやすく、トラブル時の復旧時間が長くなりがちです。長くなる分、現場には負担を強いることになるので、可能な限りエラー原因が追跡できるような情報は残すようにしましょう。

== リアルタイム処理の実装

リアルタイム処理を実装するには、処理が実行されるための条件が満たされるかどうかを常に監視する必要があります。そのため、無限ループを組んで、その中で発動条件を常に監視します。

//image[05_004][PowerAutomate for desktopによる無限ループシナリオ]

まず、loogFlgを初期化（0を代入）します。次に、loopFlgが0以外の値になったらループを抜けるようにLoop処理を追加します。Loopの中では、loopFlgの値を確認し、0以外の時にループを抜けるようにしています。また、Loop内では、ログファイルにloopFlgの値と、loop回数(loopIndex）を出力しています。

このLoop処理の中で、特定の条件が満たされた際に、所定の処理を実行するシナリオを作成すれば良いわけですが、特定の条件とは、どのようなものがあるでしょうか？
たとえば…

 * 10時、12時、15時のような特定の時間を迎えた時
 * 5分毎、10分間毎のような特定の周期を迎えた時
 * あるファイルが生成された時

ぱっと思いつくのはこれぐらいでしょうか？

ここでは、「ファイルが生成された時」をトリガーとして処理するシナリオを考えていきましょう。

先ほどの作業日報の例で行くと、トリガーとしてはYさんの作業を完了させたタイミングになります。機種X1 100台分の作業が完了した際に、基幹システムにX1 100台と投入することで、在庫がリアルタイムで見えるようになります。
そのためには、実績値を電子化する必要があります。自分は、データを入力するだけの簡単なフォームを作り、CSVファイルに出力するようにしました。
今なら、M365のFormsを使ったり、チャットツールから入力し、PowerAutomateでCSVファイルを出力する、なんてやりかたもありそうですね。

//image[05_005][CSVファイルが生成された際のロジック]

ここでは、指定したフォルダ内にCSVファイルがある場合に、コメント「実際の処理フローをココに記述します。」の箇所に処理フローを登録していきます。
例えば、これまでの例のように作業日報の登録であれば、CSVファイルを読み取り、基幹システムを操作して転記と登録を行います。
併せて処理済みのファイルはbkupフォルダに移動させます。これは同じファイルで二重登録を避ける目的と、実際に登録したデータのエビデンスを残す意味があります。またログファイルも出力しております。ログファイルについては後ほど説明致します。

このようなフローを組むことで、基幹システムへの登録作業をRPAが人知れずリアルタイムに行ってくれることで、これまでどうしても実現できなかったリアルタイムでの正しい在庫管理ができるようになりました。

== リアルタイム処理の適用事例

RPAにおけるリアルタイム処理の事例を見てみましょう。

=== 製造業における工程間在庫移動

これまでの事例としてあげてきたものが、製造業における在庫移動の事例になります。実際に私が情シス時代に構築したシナリオで、数値もかなりリアルな値になっています。では改めて処理フローを見てみましょう。

//image[05_006][工程間移動の実例]

=== 製造業における完成品入力

前項は在庫間移動でしたが、ここでは完成品入力になります。製造業においては、1つの機種を生産するのに、加工指示書と呼ばれる書類が発行されます。各現場は、この加工指示書に基づいて実際の生産を実施します。
こちらも、私が情シス時代に実際に構築したシナリオです。完成品入力は、現場応援のため総務部門で入力することになっており、加工指示書と作業日報の物理的な移動（現場→総務）も発生していました。

//image[05_007][完成品登録の事例]

== リアルタイム処理の課題と解決策

リアルタイム処理は、パソコンを占有してしまうため、常に人が見続ける（エラーなく処理が終わるか監視する）ことができません。そのため、エラーが発生した際に如何に早く気づくことができるか、またなぜエラーが発生したのかを知ることが大切です。

=== エラーを素早く知るには

リアルタイム処理で動くシナリオは、通常、人が監視をしていないところで動きます。よって、異常終了等でシナリオが止まっていても知ることができず、現場の方からの指摘で知ることになってしまいます。
そうならないためには、エラー時はしっかりとエラーをトラップし、管理者へ通知することが大切です。
また、通知も一人だけではなく、関係者複数人に送るようにしましょう。

//image[05_008][エラー時の処理例]

こちらのフローは、エラー発生時に処理されるフローになります。ログファイルへの書き込みと、画面キャプチャを取得し、Outlookを使ってメール送信をおこなっています。
今回はメールとしましたが、Teams等のチャットツールに送る方が、より早く周知できるメリットがあります。

=== エラーの原因を知るには

エラーでシナリオが止まってしまった場合を想定して、シナリオのどこまで進んだのか、その際の変数の状況はどうだったのかをファイルに保存しておくようにしましょう。また可能であれば、エラー時の画面キャプチャも保存しておくと、ログだけでは分からない状況が見え、解決のためのヒントとなる場合も多いのでオススメです。

実際にエラーで止まってしまった場合は、取得したログやキャプチャ画面等をヒントに原因を特定し対処していくことになります。そのために、ログファイルに記録すべき情報を検討します。一般的には、下記のような項目になります。

@<b>{ログの種類}

 * シナリオ名
 * 発生日時
 * 直前の処理名（行番号など）
 * エラーメッセージ
 * 変数の値

などなど

@<img>{05_009}の左側は、@<img>{05_008}で示したフローにあるログ情報をログファイルに保存するノードの画面です。
一方、右側はエラー発生時のスクリーンショットの記録です。

//image[05_009][エラー時のログ取得]

シナリオをリリースする前に、トラブル対応に必要な情報（ログ）が十分に出力されているか確認しておきましょう。

また、登録が目的のフローであれば、登録がどこまで済んでいたのかの確認も必要となります。実際の登録状況と、監視フォルダやbkupフォルダ、またログファイルの内容を見比べ、どこから処理を再開させれば良いのかを判断する必要もあります。

== リアルタイム処理の今後の展望

RPAにおいては、生産性向上、品質向上の2点に注目が集められていましたが、このようにRPAを活用することで、人手ではできなかったあるべき姿に近づくことができます。
全てのシステムがクラウド化されれば、クラウドフローで事足りることかもしれませんが、まだまだオンプレの仕組みも多いですし、クラウドからオンプレ回帰の流れもできつつあります。また、AIによる自動化等もRPAには追い風だと思っています。

== 最後に

今回記載した内容は、一部note記事にしてあったり、過去のRPACommunityのLT会でも発表した内容になりますので、併せてそちらも参照頂けると幸いです。

note

RPA事例集について

@<href>{https://note.com/kerdy/n/nd2f20dad64f2}

Youtube

RPAでリアルタイム処理

@<href>{https://youtu.be/MMfycoq9tsc?t=789}
