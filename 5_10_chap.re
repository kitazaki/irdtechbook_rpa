= 対象とする業務が決まったら

//flushright{
小﨑　肇
//}

== はじめに

対象とする業務が決まった段階では、業務の量、掛かった時間、難易度などの情報は得られても、業務の概要は見えていません。もし。この状況のままでで作成を開始したら、開発しては疑問が発生し、疑問発生の都度質問をし、回答を待つ、その繰り返しに陥ります。これでは質問する方もされる方も時間が取られてしまいますので、まずは対象とする「業務の概要」をまとめていきましょう。
「業務の概要」をあらかじめまとめておくことで、、ＲＰＡに対してどのような機能を、どのように組み込むか設計する事ができます。
設計せずに、ＲＰＡなどを作成する方もいらっしゃると思いますが、得てしてＲＰＡとしてのゴールを見失いがちです。ゴールを決めるためにも、「業務の概要」として、「仕様書」を作成しておきましょう。

== 「仕様書」

仕様書は、業務を遂行する人と、ＲＰＡなどを開発する人との共通資料となるものです。まずは関係する人みんながが理解できる、統一した言葉を使ってまとめていきます。
時として、部署外の人に分からない言葉があるかもしれません。その場合は、脚注などに説明を加えていくといいでしょう。略称、略号に関しては、資料の中で統一されてあれば使用しても構いません。

仕様書を書くには、少なくとも、４つの項目(業務情報、入力情報、出力情報、処理情報)が必要です。

 1. 業務情報：業務名の他、主となる担当者、いつ、どのように業務を行っていたかの情報をまとめます。
 2. 入力情報：業務を行うには、基となる情報（データ）があります。その情報がどのようなものかをまとめます
 3. 出力情報：業務を行った結果、新たな情報（データ）が発生します。その発生した情報が、どのようなものなのかをまとめます。
 4. 処理情報：入力情報上のデータを、どのように抽出、加工するかをまとめます。細かくまとめる必要性はなく、概要がわかる粒度に留めます。
 5. 補助情報：業務を行った時に発生したことのある不具合、原因、その対応方法などを纏めます。

== 業務情報

//image[10_001][業務情報]

=== 必要な情報

仕様書を作成する際に、必要な情報（１．業務情報）は以下のような項目です。

 * 業務名
 ** 「売上報告」「売掛情報」など、部署で認識されている名称を記入します。
 * 業務概要
 ** その業務が何をしているのかを、数行で記入します。
 * 処理サイクル
 ** その業務を毎日行うのか、週なのか、月なのか。それとも任意のタイミングで起動するのかなどを記入します。
 * 処理開始条件
 ** その業務を開始するキッカケ、条件を記入します。例えば時刻、ファイルの有無、メールの受信などです。
 * 先行業務（担当部署）
 ** 入力とする情報には、必ずその情報を出力した業務が存在します。開発に際して、直接影響する訳ではありませんが、内容を確認する窓口情報などがあると安心です。
 * 後続業務（担当部署）
 ** 出力する情報には、普通であればかならず後続業務に入力情報を扱う業務が存在します。開発に際して、直接影響する訳ではありませんが、例えば処理した出力ファイルの変更を打診するなど、連絡する窓口情報などがあると安心です。
 * ロボット名
 ** 仕様書を書く段階では不要ですが、開発の際のプロセス名、ファイル名などに使用します。開発資産に応じた名称を、記入します。

=== 任意な情報

仕様書を作成する際に、あった方がよいと思われる情報は以下の通りです。

 * 業務手順書の有無
 ** 現在、業務を行っている人のメモが書き込まれたものではなく、部署として公式に作成されたものです。古い状態のものであっても、あるかないかを明確にしておきましょう。古い状態の場合には、この機に最新化してみましょう。
 * 業務での異常発生時の対策
 ** 入力とするファイルのデータ品質が悪く、業務遂行できない、有事の際の対策を記入します。例えば、今は実行しなくても大丈夫なのか、先の業務手順書をもとに、手作業で遂行するのかなどです。(※ これはＲＰＡを改修、データを綺麗にするための猶予時間の確認のためであり、この対策があるからＲＰＡの品質を下げてもよいというものではありません。)

== 入力情報

//image[10_002][入力情報1]
//image[10_003][入力情報2]

=== 必要な情報 

仕様書を作成する際に、必要な情報（２．入力情報）は以下のような項目です。

 * 正式名称（呼称）
 ** 正式名称の他に、部署で呼称する名称、略称も併記します。
 * 現在参照するメディア
 ** Windows上のローカルフォルダ、ローカルネットワーク上の共有サーバ、Google Driveなどのプラットフォームがあります。
 * 現在参照するフォルダ
 ** 入力情報が格納されている位置情報を記入します。Windowsでしたらファイル名を除くフルパス、Google Driveならフォルダ(FOLDERID)です。
 ** 1. 固定部/可変部
 *** フォルダの情報の中で、固定部分、可変部分を見極めます。
 ** 2. 可変部命名ルール
 *** 例えば実行日を基準として、前月の年、月がフォルダ名になっている等のルールを記入します。
 ** 3. 生成方法
 *** そのフォルダが、どのように作成されるのかを記入します。
 *** 例えば先行業務の担当者が手で作成している等です。

====[column]フォルダの命名

とあるお客様の開発現場で、現在使用しているフォルダ情報をサンプルとして共有していただき、そのフォルダ情報の可変部分をサンプルの通りにしたＲＰＡを開発したことがあります。受入試験をしていただき、合格をいただいて、本運用も順調に動いていました。
しばらくして、そのＲＰＡが異常終了したと連絡を受けました。原因調査を進めていくと、本来あるべきフォルダの命名は"yyyy△MM"(△は半角空白)だったのですが、その時のフォルダは、"yyyy△△MM"だったのです。これは、先行業務の担当の方が手作業で作成した際のミスだった事が原因でした。
また先行業務の担当の方と相談して、ＲＰＡ側で翌月のファイルを作成してあげ、極力自動化してしまうのも、異常終了リスクを減らす方法です。

====[/column]

 * 現在参照するファイル
 ** 入力情報のファイル情報を記入します。Windowsでしたらファイル名、Google Driveならファイル(FILEID)です。
 ** 1. 固定部／可変部
 *** ファイルの情報の中で、固定部分、可変部分を見極めます。
 ** 2. 可変部命名ルール
 *** 例えばファイル名の一部に社員番号が含まれる等のルールを記入します。
 ** 3. １処理辺りの数
 *** 入力情報のフォルダに、そのファイルが何個格納されるかを記入します。
 *** フォルダに１つしかない場合、フルパスで狙い撃ちで読み込む処理を行えます。
 *** フォルダにファイルが複数ある場合、全てのファイルを対象にするのか、いずれかの一つを対象にするのか、確認が必要です。
 ** 4. １ファイル辺りのデータ量
 *** 対象とする入力情報のデータ量を記入します。
 *** 例えば、１ファイル辺りのデータ量が数千だとしても、処理対象が複数の場合はそのファイル数倍のデータ量になります。
 *** １ファイル辺りのデータ量が巨大であったら、その入力情報のデータの持たせ方を変えるなど、検討が必要な場合も出てきます。
 ** 5. 第三者制限
 *** 部署で内製するのであれば、入力情報を第三者に開示する必要はないですが、外製とする場合は、個人情報などの扱いに気をつけなくてはならない情報が含まれている入力情報を開示しなければならない場合があります。そういった場合は、「条件付き」として、以下のような処置を施す事を検討する必要が出てきます。
 **** 情報にマスクを掛ける
 **** 情報量を減らし、正しいデータの桁数などに合わせたダミーデータを準備する
 **** レイアウトはそのままで、処理で使う情報以外を空白にしてしまう
 *** 選択肢として「提示不可」も設定しましたが、このデータですと内製化も難しくなると思われますので、「条件付き」として扱える入力情報にする事を考えましょう。
 ** 6. ファイル形式
 *** ファイル形式によって、読み込むべき方法が変わります。
 *** 例えばＥＸＣＥＬには複数のシートが内包できるので、どのシートを対象とするのか確認する事が必要です。
 *** ＣＳＶですと、文字コード（SJIS/UTF-8)、区切り文字（カンマ、タブなど）、改行コード（Lf/CrLf）を確認する事が必要です。

====[column]0で始まる数字のデータ

とあるお客様の開発現場で、現在使用しているファイルをサンプルとして共有していただき、ＥＸＣＥＬファイルを入力にしたＲＰＡを開発した事があります。ＥＸＣＥＬファイル中に、従業員番号という項目があり、その桁がまちまちなのです。業務のご担当様に確認したところ、ＣＳＶファイルをＥＸＣＥＬで開いて、列を入れ替えたりしている事が判明。
0で始まる数字のデータを含んだＣＳＶファイルをＥＸＣＥＬで開くと、先頭の0はなくなる事は認識していたようですが、これまでは人が手で対応されていたそうです。もちろん、ＣＳＶファイルを入力にしたＲＰＡに改良し、人手を介することはなくなりました。

====[/column]

== 出力情報

//image[10_004][出力情報1]
//image[10_005][出力情報2]

=== 必要な情報  

仕様書を作成する際に、必要な情報（３．出力情報）は以下のような項目です。

 * 正式名称（呼称）
 ** 正式名称の他に、部署での呼称、略称も併記します。後続処理を扱う部署での呼称、略称もあるといいでしょう。
 * 現在参照するメディア
 ** Windows上のローカルフォルダ、共有サーバ、Googleなどのプラットフォームがあります。
 * 現在参照するフォルダ
 ** 出力情報として保存する位置情報を記入します。Windowsでしたらファイル名を除くフルパス、Googleならフォルダ(FOLDERID)です。
 ** 1. 固定部／可変部
 *** フォルダの情報の中で、固定部分、可変部分を見極めます。
 ** 2. 可変部命名ルール
 *** 例えば実行日を基準として、前月の年、月がフォルダ名になっている等のルールを記入します。
 ** 3. 生成方法
 *** そのフォルダが、どのように作成されるのかを記入します。
 *** 多くは、出力情報を格納する際に作成する事が多いとは思います。部署間の場合には、後続の業務の担当者が、ご自身の手で作成する場合もあるかもしれません。
 * 現在出力しているファイル
 ** 出力情報のファイル情報を記入します。Windowsでしたらファイル名、Googleならファイル(FILEID)です。
 ** 1. 固定部／可変部
 *** 出力ファイルの情報の中で、固定部分、可変部分を見極めます。
 ** 2. 可変部命名ルール
 *** 例えば出力ファイル名の一部を社員番号とする等のルールを記入します。
 ** 3. 新規／更新
 *** 出力情報のフォルダに、出力ファイルを新規作成するのか、あるいは既存のファイルに追記するのかを記入します。
 *** 新規作成の場合は、出力ファイルに対して上書きする方法、あるいは一度出力ファイルを削除してから改めて新規に作成する方法があります。
 *** 追記の場合は、出力ファイルを事前に読み込む必要が発生します。
 ** 4. １処理辺りの数
 *** 出力情報のフォルダに、そのファイルが何個格納するかを記入します。
 *** 特に処理には影響しませんが、後続処理には大いに関係しますので、しっかりまとめ、確認しておきましょう。
 ** 5. ファイル形式
 *** ファイル形式によって、書き込むべき方法が変わります。
 *** 例えばEXCELには複数のシートが内包できるので、シート名を固定にするのか、可変でいいのか、
 *** 新規作成の場合、必ず存在する"Sheet1"にするかなど、後続処理の担当者と確認する事が必要です。
 *** CSVですと、文字コード（SJIS/UTF-8)、区切り文字（カンマ、タブなど）を確認する事が必要です。
 ** 6. 第三者制限
 *** 出力情報には、第三者制限を受けた入力情報が転記されている場合があります。他にも、業務ロジックで新たに生成された第三者に開示できない情報が含まれている場合もあるかもしれません。
 *** 例えばメールに添付する場合の誤送信対策を確実に行う必要性などの確認項目になります。

== 処理情報

仕様書を作成する際に、必要な情報（４．処理情報）は以下のようにまとめます。

 * 入力情報の準備をする、使用する、出力ファイルを書き出す（追記する）など、情報の状態の変化を明示する。
 ** 例)
 *** ○　所定フォルダから、Ｔファイルを開く。
 *** ×　エクスプローラで所定フォルダを開き、中のＴフォルダをダブルクリックして開く。
 * 何の目的にしているのかを書き出す。その際に、手段・方法（どのように）は記述しない）。
 ** 例)
 *** ○　ＴファイルのＸ項目から、ＭファイルのＹ項目を得る。
 *** ×　ＴファイルのＸ項目から、ＶＬＯＯＫＵＰ関数を使用して、ＭファイルのＹ項目を得る。
 *** ○　ＳシートのＸ項目から、値が１００以上の情報を得る。
 *** ×　Ｓシートにオートフィルタを設定し、Ｘ項目から、値が１００以上の情報を得る。
 * 業務上の条件分岐を記述する。その際、「処理対象とする条件」と対を成す「処理対象外とする条件」を併記すると理解しやすい。
 ** 例）
 *** ○　メールアドレスが設定されている情報から、電子メールを作成する。
 *** ○　メールアドレスが設定されていない情報は、その情報件数を計測し、処理の最後に、その情報件数を載せた電子メールを作成する。
 * 業務上の繰り返し作業の範囲を明示する
 ** 例)
 *** ○　明細ファイルがなくなるまで、以下の処理を繰返す。明細ファイルのデータをサマリファイルに転記する。
 *** ×　明細ファイルのデータをサマリファイルに転記する。(前述の入力情報で「1処理ファイルの数」で分かりますが...)

== 補助情報

仕様書を作成する際に、必要な情報（５．補助情報）は以下の通りです。

 * 想定される不具合、原因と対策
 ** 先行する業務の出力情報が、本業務の入力情報になります。その時の出力情報の品質が悪いと、本業務での処理の妨げになります。ここでは過去に遭遇した不具合と原因、対策を記入します。
 ** 例）
 *** 不具合：ゼロで始まる数字の筈が、先行するゼロがなくなっていて、それ故マスタ上の値と合致せず、対象外となる。
 *** 原因：先行業務では、ＣＳＶファイルを扱うのであったが、値の修正するシーンがあり、その際の修正にＥＸＣＥＬを使用していたため。
 *** 対策：正しい情報を入手する。あるいは、所定の桁になるまでゼロを前置する。
 ** 例）
 *** 不具合：Ａ列から有効データが格納されているはずが、先行業務のメモ用に列が挿入され、有効データがＢ列からになっている。
 *** 原因：先行業務の担当が後で調査するための情報を残したまま、本処理が実行されてしまった。
 *** 対策：有効データの開始列を判断する文言を探し、その文字がある列から処理するようにする。
 * 「設定ファイル」に関する設定方法、参照方法
 ** 例えば、メールの件名のような固定的な情報は、ＲＰＡプログラム自身に持たせるのではなく、ＥＸＣＥＬのようなファイルに持たせ、そのファイルから情報を得る方法がいいでしょう。そうしておけば、開発が完了し運用フェーズに入ってから、もし業務の仕様が変わって、メールの件名を変更する場合にも、ＲＰＡプログラムを修正するのではなく、そのファイルを修正するだけで動きを変える事ができます。そのような役割のファイルを「設定ファイル」と言います。「コンフィグファイル」とか、「ＣＯＮＦＩＧファイル」と呼ばれる事もあります。「設定ファイル」を準備したら、その管理方法を決めます。
 ** 1. ＲＰＡプログラム内部の一部として管理する
 *** 同じロボットを複数動かす時に、ロボットそれぞれに違う情報を与える事ができる。
 *** 逆も言え、同じロボットを複数動かす時に、同じ情報かどうかは保証できない。
 ** 2. ＲＰＡプログラム内部とは、別区画に管理する。別区画の情報は、ＲＰＡプログラム内部の一部として管理するファイルにて管理する。
 *** 同じロボットを複数動かす時に、ロボットそれぞれに同じ情報を与える事ができる。
 *** 別区画が使えなくなると、そこを参照する全てのロボットが実行できない。

== 結び

「業務の概要」をまとめるために必要な情報などを列挙してきました。無論、これが足りないとか、これは要らないとか、色々なご意見があると思いますが、その都度決めていただければと思います。

本書で紹介した様式は、システム設計における図式化手法のひとつである、HIPO (Hierarchy plus Input Process Output)の様式を模したものです。

HIPOは、「図式目次」と「IPOダイアグラム」の2つから構成されます。機能の階層(Hierarchy)を「図式目次」に記述し、図式目次の機能ごとに入力(Input)、処理(Process)、出力(Output)の関係を「IPOダイアグラム」に記述するものですが、機能の階層より、入力、処理、出力の情報をまとめるための「IPOダイアグラム」を参考にしました。

この表はパワーポイントの「表」を挿入して作成しましたが、実際には、ＥＸＣＥＬファイルなどにまとめた方が便利です。

 * ファイル中の文字列を検索しやすい
 * ハイパーリンクを設定して、展開されている情報へジャンプさせる
 * 設定した印刷範囲外に、メモ情報を残せる
 * シートを保護し、情報を保護する

「業務の概要」として作成した「仕様書」は、レビューなどを経て、正式な書類として残すようにしていきましょう。無論、業務の内容が変わったら改修も必要ですし、業務が不要になったら文書の抹消も必要です。

====[column]無意味な作業

とあるお客様の開発現場で、Ａロボットで使用しているプラットフォームを別のプラットフォームへと変更する改修を依頼されました。改修対象となるＡロボットを共有され、中身を解読し始め、改修概要をまとめた資料を作成し、現場担当者様との打ち合わせに臨んだのですが、開口一番、「Ａロボットは現在運用していない」と。その場でＢロボットの改修に当たる事になったのですが、共有されたＢロボットは、プラットフォーム変更以前に業務ルール改編による改修が進行中で、２週間ほど無意味な作業をしていたのでした。

====[/column]

最後に、入力とする情報は「ナマモノ」です。常に変化しています。そのような情報を扱う業務も「ナマモノ」と言えるでしょう。それを詳らかにしても、過去のものになっていきます。新しいパソコンを買った途端、古いパソコンと言われてしまうように。
しかし、過去にものになるからといって、「業務の概要」をまとめない手はありません。改めて業務に向き合って、「業務の概要」にまとめてみてください。まとめてみる事で、本当に必要な業務なのか？他で同様な事をしている業務ではないか？が知る事ができる「キッカケ」になります。これも「自動化」への一歩になります。
